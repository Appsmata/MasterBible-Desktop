#line 2 "sqlite3_lexer.cpp"

#line 4 "sqlite3_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */
/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
/* %endif */

/* %if-c-only */

/* %endif */

/* %if-c-only */

/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* begin standard C++ headers. */
/* %if-c++-only */
/* %endif */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* %not-for-header */
/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */
/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))
/* %ok-for-header */

/* %if-reentrant */

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* %endif */

/* %if-not-reentrant */
/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
	FILE *yy_input_file;
/* %endif */

/* %if-c++-only */
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

/* %if-c-only Standard (non-C++) definition */

/* %if-not-reentrant */
/* %not-for-header */
/* %ok-for-header */

/* %endif */

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

/* %endif */

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define yywrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

/* %% [1.5] DFA */

/* %if-c-only Standard (non-C++) definition */

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	yyg->yy_c_buf_p = yy_cp;
/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 120
#define YY_END_OF_BUFFER 121
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[449] =
    {   0,
        0,    0,    0,    0,  121,  119,    1,    2,    2,  119,
      119,  106,  105,  119,   95,   96,  102,  100,   98,  101,
       97,  103,   91,   91,  119,   99,  113,  109,  111,   93,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,  119,  119,  107,  104,  119,  119,  119,   86,
        1,    2,  115,    0,   89,    0,   90,    3,   91,    4,
       91,   91,    0,    0,   94,  117,  114,  116,  110,  112,
      118,   93,   86,   86,   86,   86,   10,   86,    0,    0,
        0,   86,   86,   86,   86,   86,   86,   86,   86,   86,

       86,   86,   86,   86,   86,   86,   86,   40,   86,   86,
       43,   47,   86,   86,   86,   52,   86,   56,   57,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,    0,    0,   88,    0,
       87,  108,   86,    0,    0,   86,   91,    0,   91,   91,
       93,   86,   86,    6,   11,   86,    0,    0,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       31,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   49,   86,   86,   53,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,

       86,   86,   86,   72,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   92,    0,    0,    5,   86,
       86,   86,    0,   86,   86,   14,   15,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   28,   86,   30,   86,
       86,   34,   86,   86,   86,   86,   39,   86,   86,   86,
       86,   86,   86,   50,   86,   86,   55,   58,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   70,
       86,   86,   74,   76,   77,   86,   86,   86,   86,   86,
       83,   86,   86,    8,   86,   86,   86,   86,   16,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,

       35,   86,   86,   86,   86,   86,   44,   86,   86,   86,
       51,   86,   86,   86,   86,   62,   63,   86,   86,   86,
       86,   86,   69,   86,   73,   86,   86,   86,   86,   81,
       86,   84,   86,    9,   86,   86,   86,   86,   86,   86,
       20,   86,   86,   86,   27,   86,   32,   33,   36,   86,
       86,   41,   86,   86,   46,   48,   86,   86,   86,   86,
       86,   65,   86,   86,   86,   71,   86,   86,   79,   80,
       86,   86,   86,    7,   13,   17,   86,   86,   86,   24,
       86,   86,   86,   86,   38,   86,   86,   54,   86,   86,
       61,   86,   66,   86,   86,   86,   86,   82,   85,   86,

       18,   86,   86,   86,   26,   29,   86,   86,   86,   86,
       86,   86,   67,   68,   86,   86,   86,   86,   86,   86,
       86,   37,   42,   45,   59,   60,   86,   75,   78,   86,
       19,   86,   86,   25,   64,   86,   86,   86,   86,   21,
       22,   12,   86,   86,   86,   86,   23,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    1,    1,    7,    8,    9,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   20,   21,   22,
       23,   24,   25,   20,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   35,
       51,    1,   52,    1,   53,   54,   55,   56,   57,   58,

       59,   60,   61,   62,   63,   35,   64,   65,   66,   67,
       68,   69,   70,   71,   72,   73,   74,   75,   76,   77,
       78,   35,    1,   79,    1,   80,    1,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,    1,    1,   82,   82,   82,   82,   82,   82,   82,

       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   84,
       84,   84,   84,   84,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[85] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    3,    1,
        1,    1,    1,    1,    1,    1,    1,    4,    4,    1,
        1,    1,    1,    1,    1,    5,    5,    5,    5,    5,
        5,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        1,    1,    7,    1,    5,    5,    5,    5,    5,    5,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    1,    1,
        1,    7,    7,    7
    } ;

static const flex_int16_t yy_base[457] =
    {   0,
        0,    0,   59,   60,  362, 2265,  343,   84,   86,  316,
      315, 2265, 2265,  311, 2265, 2265, 2265, 2265, 2265,  299,
       73,  300,   77,   81,    0, 2265,   79,  274,   81,  277,
      128,   64,  187,   76,  124,   82,   87,   35,  241,   98,
      115,  161,  182,  192,  234,  164,  227,  289,  259,  142,
      296,  170,  239,  236,  202, 2265,  197,  181,  170,  354,
      239,  109, 2265,  228,  223,  212,  209, 2265,  274, 2265,
      276,  331,  112,    0,    0, 2265, 2265, 2265, 2265, 2265,
     2265,  102,   50,  200,  254,  305,  312,  301,  128,  122,
      105,  319,  332,  340,  368,  347,  374,  381,  388,  395,

      391,  412,  154,  425,  417,  446,  436,   59,  454,  449,
      505,  458,  472,  462,  478,  498,  510,  270,  273,  527,
      524,  539,  551,  584,  564,  554,  576,  588,  619,  605,
      628,  623,  631,  614,  634,  647,  174,  125, 2265,  121,
      108, 2265,  283,   72,   70,  651,  425,  174,  196,    0,
      269,  656,  641,  430,  482,  660,   63,   57,  671,  718,
      704,  559,  721,  696,  713,  759,  739,  742,  676,  752,
      684,  764,  748,  772,  768,  784,  779,  815,  822,  818,
      829,  834,  808,  849,  690,  724,  855,  837,  843,  858,
      864,  870,  894,  890,  885,  898,  904,  920,  924,  910,

      933,  951,  954,  787,  959,  970,  962,  967,  979,  948,
      973, 1001, 1013, 1021,  938, 2265,  120,   28,  793, 1025,
     1031, 1038,   17, 1035, 1047,  882,  992, 1042, 1055, 1063,
     1067, 1071, 1052, 1086, 1090, 1098, 1007, 1093, 1075, 1121,
     1118, 1082, 1137, 1148, 1143, 1151, 1104, 1165, 1155, 1140,
     1178, 1172, 1181, 1110, 1195, 1198, 1115, 1168, 1206, 1212,
     1203, 1215, 1243, 1232, 1227, 1257, 1248, 1265, 1271, 1184,
     1277, 1254, 1282, 1224, 1260, 1289, 1300, 1306, 1320, 1311,
     1285, 1328, 1337, 1314, 1341, 1347, 1369, 1333, 1350, 1362,
     1375, 1379, 1383, 1387, 1390, 1393, 1409, 1417, 1430, 1434,

     1365, 1437, 1446, 1449, 1452, 1461, 1403, 1470, 1464, 1486,
     1420, 1490, 1493, 1513, 1496, 1474, 1477, 1532, 1523, 1537,
     1547, 1556, 1501, 1544, 1504, 1561, 1551, 1578, 1582, 1516,
     1567, 1519, 1596, 1541, 1618, 1609, 1622, 1625, 1628, 1631,
     1585, 1614, 1643, 1664, 1589, 1646, 1638, 1649, 1652, 1655,
     1678, 1658, 1669, 1706, 1672, 1675, 1712, 1716, 1729, 1719,
     1726, 1684, 1745, 1748, 1757, 1690, 1752, 1762, 1698, 1733,
     1782, 1776, 1779, 1741, 1769, 1772, 1797, 1804, 1790, 1793,
     1841, 1849, 1812, 1832, 1800, 1844, 1853, 1809, 1861, 1867,
     1820, 1881, 1828, 1874, 1877, 1896, 1910, 1838, 1870, 1916,

     1888, 1923, 1937, 1931, 1901, 1904, 1941, 1944, 1951, 1965,
     1957, 1978, 1960, 1968, 1981, 1987, 1992, 2008, 2012, 2020,
     2025, 1995, 2003, 2015, 2028, 2031, 2044, 2035, 2038, 2070,
     2041, 2060, 2092, 2052, 2055, 2101, 2111, 2118, 2105, 2063,
     2125, 2073, 2137, 2141, 2133, 2121, 2077, 2265, 2225, 2232,
     2235, 2238, 2245, 2252, 2256, 2259
    } ;

static const flex_int16_t yy_def[457] =
    {   0,
      448,    1,    1,    1,  448,  448,  448,  448,  448,  448,
      449,  448,  448,  450,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  451,  448,  448,  448,  448,  448,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  453,  454,  448,  448,  448,  448,  448,  452,
      448,  448,  448,  449,  448,  450,  448,  448,  448,  448,
      448,  448,  448,  455,  451,  448,  448,  448,  448,  448,
      448,  448,  452,  452,  452,  452,  452,  452,  448,  448,
      448,  452,  452,  452,  452,  452,  452,  452,  452,  452,

      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  456,  453,  448,  454,
      448,  448,  452,  448,  448,  452,  448,  448,  448,  455,
      448,  452,  452,  452,  452,  452,  448,  448,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,

      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  448,  456,  448,  452,  452,
      452,  452,  448,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,

      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,

      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,    0,  448,  448,
      448,  448,  448,  448,  448,  448
    } ;

static const flex_int16_t yy_nxt[2350] =
    {   0,
        6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
       36,   37,   38,   39,   38,   40,   41,   42,   43,   44,
       45,   38,   46,   47,   48,   49,   50,   51,   52,   38,
       53,    6,   38,   54,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   42,   43,   44,   45,   38,
       46,   47,   48,   49,   50,   51,   52,   38,   55,   56,
        6,   57,   58,   59,   60,   60,   62,   62,   62,   62,
       69,   69,   71,   92,   72,   72,   71,   83,   72,   72,

       76,   77,   78,   80,   81,   98,   73,  104,  143,   99,
       73,   62,   62,   60,   60,  105,   89,   90,   91,  151,
      151,  106,   92,  107,  148,   74,  148,  113,  216,  149,
      149,   89,   90,   91,   98,   73,  104,  223,   99,   73,
       89,   90,   91,   83,  105,   89,   90,   91,  114,  106,
      218,  107,  143,   74,   84,   85,  113,   89,   90,   91,
      100,  140,  101,   89,   90,   91,   86,  102,   89,   90,
       91,   87,  103,   88,  141,  134,  139,  114,  137,   89,
       90,   91,  216,   84,   85,  158,  115,  173,  100,  123,
      101,  149,  149,  124,   86,  102,   89,   90,   91,   87,

      103,   88,  157,  125,  134,   89,   90,   91,   83,   89,
       90,   91,   93,  149,  149,  115,  173,   66,  123,   94,
       67,  116,  124,   89,   90,   91,   95,  117,   64,   96,
      118,  125,   97,   65,  119,   89,   90,   91,  120,  152,
       61,   93,   89,   90,   91,   89,   90,   91,   94,  116,
      145,   89,   90,   91,   95,  117,  126,   96,  118,  121,
       97,  144,  119,   89,   90,   91,  120,  152,   89,   90,
       91,  108,  109,   89,   90,   91,  122,  143,  110,  111,
      142,   89,   90,   91,  112,  126,  151,  151,  121,  141,
      139,   69,   69,  147,  147,   82,   79,  131,  153,  132,

      108,  109,  133,   73,  122,   73,  110,  111,   89,   90,
       91,   70,  112,   68,  127,   89,   90,   91,  128,   67,
       65,  129,   89,   90,   91,  131,  153,  132,  135,  136,
      133,  130,   73,  154,   73,   89,   90,   91,   63,  155,
       89,   90,   91,  127,   61,  156,   71,  128,   72,   72,
      129,   89,   90,   91,   89,   90,   91,  135,  136,  130,
       73,  448,  154,  159,   89,   90,   91,  448,  155,  161,
       89,   90,   91,  156,  448,  160,  164,   89,   90,   91,
       84,   85,   89,   90,   91,  448,   89,   90,   91,   73,
      448,  159,  146,   89,   90,   91,  448,   87,  161,   88,

       89,   90,   91,  160,  162,  164,  163,  448,  448,   84,
       85,  166,  448,   89,   90,   91,  165,  167,  448,  171,
      146,   89,   90,   91,  168,   87,  448,   88,   89,   90,
       91,  169,  162,  448,  163,   89,   90,   91,  170,  172,
      166,  448,  147,  147,  165,  167,  448,  448,  171,   89,
       90,   91,  168,  176,   73,   89,   90,   91,  174,  169,
      448,  175,   89,   90,   91,  448,  170,  448,  172,   89,
       90,   91,   89,   90,   91,  179,   89,   90,   91,  448,
      448,  176,  177,   73,  448,  448,  181,  174,  178,  175,
      448,  448,  180,   89,   90,   91,  185,  187,   89,   90,

       91,  448,  448,  179,  448,  448,   89,   90,   91,  448,
      177,   89,   90,   91,  181,  448,  178,   89,   90,   91,
      180,  186,  188,  448,  185,  187,  448,   89,   90,   91,
       89,   90,   91,  182,  448,   89,   90,   91,  183,   89,
       90,   91,  189,   89,   90,   91,  190,  448,  184,  186,
      188,  448,  448,   89,   90,   91,  191,  448,  448,   89,
       90,   91,  182,   89,   90,   91,  192,  183,  193,  448,
      189,  448,  194,  448,  190,  448,  184,  448,  448,   89,
       90,   91,  448,  448,  195,  191,   89,   90,   91,  196,
      203,   89,   90,   91,  192,  229,  448,  193,  204,  448,

      201,  194,  205,  448,  448,   89,   90,   91,   89,   90,
       91,  202,  448,  195,  197,  198,  448,  196,  203,  448,
       89,   90,   91,  229,  199,  206,  204,  200,  201,  448,
      448,  205,   89,   90,   91,   89,   90,   91,  448,  202,
       89,   90,   91,  197,  198,   89,   90,   91,  207,  448,
      208,  211,  199,  206,  209,  200,  213,   89,   90,   91,
      448,  210,  448,  214,  212,   89,   90,   91,  448,   89,
       90,   91,  448,  448,  221,  448,  448,  207,  208,  219,
      211,  448,  448,  209,  213,  448,   89,   90,   91,  448,
      210,  215,  214,  212,  448,   89,   90,   91,  220,  222,

       89,   90,   91,  221,   89,   90,   91,  448,  219,   89,
       90,   91,   89,   90,   91,   89,   90,   91,  224,  215,
      238,  232,   89,   90,   91,  448,  220,  222,   89,   90,
       91,  228,   89,   90,   91,  253,  448,   89,   90,   91,
      448,   89,   90,   91,  448,  225,  224,  226,  238,  448,
      232,  230,   89,   90,   91,  233,  448,   89,   90,   91,
      228,  448,  227,  253,  231,   89,   90,   91,  236,  237,
      448,   89,   90,   91,  225,  448,  226,   89,   90,   91,
      230,  239,  448,  233,  234,   89,   90,   91,  235,  240,
      227,  241,  231,  448,   89,   90,   91,  236,  237,   89,

       90,   91,   89,   90,   91,   89,   90,   91,  242,  448,
      239,  243,  448,  234,  448,  245,  448,  235,  240,  241,
       89,   90,   91,   89,   90,   91,  448,  448,  244,   89,
       90,   91,  448,   89,   90,   91,  242,  448,  448,  243,
       89,   90,   91,  245,  246,   89,   90,   91,  247,   89,
       90,   91,  251,   89,   90,   91,  244,  248,  249,  448,
       89,   90,   91,  250,  255,   89,   90,   91,   89,   90,
       91,  448,  448,  246,   89,   90,   91,  247,  252,  448,
      251,  256,  448,  448,  254,  248,  448,  249,  448,   89,
       90,   91,  250,  255,  257,  448,   89,   90,   91,   89,

       90,   91,  448,   89,   90,   91,  258,  252,  448,  256,
       89,   90,   91,  254,  259,   89,   90,   91,   89,   90,
       91,  260,  257,  448,   89,   90,   91,  261,  262,  263,
       89,   90,   91,  264,  258,  448,   89,   90,   91,   89,
       90,   91,  259,  448,  448,   89,   90,   91,  448,  265,
      260,   89,   90,   91,  267,  261,  262,  448,  263,  448,
      266,  448,  264,   89,   90,   91,   89,   90,   91,  268,
      283,   89,   90,   91,  448,   89,   90,   91,  265,   89,
       90,   91,  267,  271,  269,   89,   90,   91,  266,  277,
      448,   89,   90,   91,  270,  272,  275,  268,  278,  283,

      274,   89,   90,   91,  448,   89,   90,   91,  448,  448,
      273,  448,  271,  269,   89,   90,   91,  277,  276,   89,
       90,   91,  270,  272,  448,  275,  448,  278,  274,   89,
       90,   91,   89,   90,   91,   89,   90,   91,  273,  279,
       89,   90,   91,   89,   90,   91,  276,  448,   89,   90,
       91,   89,   90,   91,   89,   90,   91,  280,  448,  281,
       89,   90,   91,  282,  287,  448,  448,  279,  448,  284,
      285,  286,  288,   89,   90,   91,  448,  289,  448,  448,
      290,  294,   89,   90,   91,  280,  448,  281,   89,   90,
       91,  282,  448,  287,   89,   90,   91,  284,  285,  291,

      286,  288,   89,   90,   91,  289,   89,   90,   91,  290,
      294,  292,   89,   90,   91,  293,   89,   90,   91,   89,
       90,   91,  448,   89,   90,   91,  298,  291,   89,   90,
       91,  295,  296,   89,   90,   91,   89,   90,   91,  292,
      448,  448,  297,  293,   89,   90,   91,  448,   89,   90,
       91,  448,   89,   90,   91,  298,   89,   90,   91,  295,
      296,  299,  300,   89,   90,   91,  301,   89,   90,   91,
      297,   89,   90,   91,   89,   90,   91,  302,  448,   89,
       90,   91,  303,  306,  304,   89,   90,   91,  307,  299,
      300,   89,   90,   91,  448,  301,   89,   90,   91,   89,

       90,   91,   89,   90,   91,  448,  302,  305,  448,  448,
      303,  308,  306,  304,  309,  448,  307,  310,   89,   90,
       91,   89,   90,   91,   89,   90,   91,  311,  315,   89,
       90,   91,   89,   90,   91,  305,   89,   90,   91,  313,
      308,  314,  309,  312,  316,  310,   89,   90,   91,   89,
       90,   91,  448,   89,   90,   91,  311,  315,  448,   89,
       90,   91,   89,   90,   91,   89,   90,   91,  313,  448,
      314,  312,  317,  316,  318,  319,   89,   90,   91,   89,
       90,   91,  320,  325,   89,   90,   91,   89,   90,   91,
      321,  322,  448,   89,   90,   91,   89,   90,   91,  323,

      448,  317,  318,  319,  324,   89,   90,   91,   89,   90,
       91,  320,  325,   89,   90,   91,  448,  448,  321,  448,
      322,  326,  448,  448,   89,   90,   91,  448,  323,   89,
       90,   91,  448,  324,  327,   89,   90,   91,   89,   90,
       91,   89,   90,   91,  448,  328,   89,   90,   91,  326,
      329,  330,   89,   90,   91,  448,  331,  332,   89,   90,
       91,  337,  327,   89,   90,   91,   89,   90,   91,  448,
       89,   90,   91,  328,  448,  448,  333,  448,  329,  334,
      330,   89,   90,   91,  331,  335,  332,   89,   90,   91,
      337,  448,   89,   90,   91,   89,   90,   91,  336,  448,

      448,   89,   90,   91,  333,  448,  338,  334,  339,   89,
       90,   91,  341,  335,   89,   90,   91,  448,   89,   90,
       91,  340,   89,   90,   91,  342,  343,  336,   89,   90,
       91,   89,   90,   91,  338,  344,  448,  339,  345,  448,
      448,  341,  448,   89,   90,   91,   89,   90,   91,  340,
       89,   90,   91,  342,  343,  346,   89,   90,   91,  347,
       89,   90,   91,  344,   89,   90,   91,  345,   89,   90,
       91,   89,   90,   91,   89,   90,   91,  348,  448,  349,
      351,  352,  448,  346,   89,   90,   91,  448,  347,  448,
       89,   90,   91,  350,  353,  354,  448,  448,   89,   90,

       91,   89,   90,   91,  448,  348,  448,  349,  355,  351,
      352,   89,   90,   91,  448,   89,   90,   91,   89,   90,
       91,  350,  356,  353,  354,  448,  357,   89,   90,   91,
       89,   90,   91,   89,   90,   91,  355,  358,  360,  448,
      448,  359,   89,   90,   91,   89,   90,   91,  448,  448,
      356,   89,   90,   91,  357,   89,   90,   91,   89,   90,
       91,  361,  448,  362,  363,  358,  360,   89,   90,   91,
      359,   89,   90,   91,   89,   90,   91,   89,   90,   91,
      364,  365,   89,   90,   91,   89,   90,   91,  366,  368,
      361,  362,  371,  363,   89,   90,   91,   89,   90,   91,

       89,   90,   91,  367,   89,   90,   91,  369,  448,  364,
      365,  370,  448,   89,   90,   91,  366,  368,   89,   90,
       91,  371,   89,   90,   91,   89,   90,   91,   89,   90,
       91,  367,   89,   90,   91,  448,  369,   89,   90,   91,
      370,  372,   89,   90,   91,  373,  448,  374,   89,   90,
       91,  375,  448,  448,  376,  377,  378,  448,  379,   89,
       90,   91,  448,   89,   90,   91,   89,   90,   91,  372,
       89,   90,   91,  383,  373,  374,  448,   89,   90,   91,
      375,  448,  448,  376,  377,  378,  379,  380,  384,  381,
       89,   90,   91,  382,  386,   89,   90,   91,  448,   89,

       90,   91,  383,   89,   90,   91,   89,   90,   91,   89,
       90,   91,   89,   90,   91,  380,  385,  384,  381,   89,
       90,   91,  382,  386,   89,   90,   91,   89,   90,   91,
       89,   90,   91,   89,   90,   91,   89,   90,   91,   89,
       90,   91,  387,  448,  385,   89,   90,   91,  388,  389,
       89,   90,   91,   89,   90,   91,   89,   90,   91,   89,
       90,   91,  390,  448,  392,   89,   90,   91,  391,  448,
      387,   89,   90,   91,  393,  394,  388,  396,  389,   89,
       90,   91,  448,  448,  395,  448,  448,   89,   90,   91,
      397,  390,  392,   89,   90,   91,  391,   89,   90,   91,

       89,   90,   91,  393,  394,  448,  396,   89,   90,   91,
       89,   90,   91,  395,   89,   90,   91,  448,  398,  397,
      399,  400,   89,   90,   91,  448,   89,   90,   91,   89,
       90,   91,  448,   89,   90,   91,  448,  402,   89,   90,
       91,  401,  403,   89,   90,   91,  398,  448,  399,  400,
       89,   90,   91,   89,   90,   91,  406,   89,   90,   91,
       89,   90,   91,   89,   90,   91,  402,  404,  448,  401,
      407,   89,   90,   91,   89,   90,   91,  405,   89,   90,
       91,   89,   90,   91,  406,   89,   90,   91,  408,  409,
       89,   90,   91,   89,   90,   91,  404,  448,  407,  448,

      410,   89,   90,   91,  448,  411,  405,  448,  412,   89,
       90,   91,  414,   89,   90,   91,  408,  409,  413,   89,
       90,   91,   89,   90,   91,   89,   90,   91,  410,  448,
       89,   90,   91,  411,   89,   90,   91,  412,  415,  416,
      414,  448,   89,   90,   91,  417,  413,  448,   89,   90,
       91,   89,   90,   91,  448,   89,   90,   91,   89,   90,
       91,  418,   89,   90,   91,  419,  415,  421,  416,   89,
       90,   91,  422,  423,  417,  448,  448,   89,   90,   91,
      448,  420,   89,   90,   91,   89,   90,   91,  426,  418,
      448,   89,   90,   91,  419,  421,  448,   89,   90,   91,

      424,  422,  423,  425,   89,   90,   91,  427,  448,  420,
      448,  448,   89,   90,   91,  429,  448,  426,   89,   90,
       91,  448,   89,   90,   91,   89,   90,   91,  424,  430,
      428,  425,   89,   90,   91,  448,  427,  432,   89,   90,
       91,   89,   90,   91,  429,  448,   89,   90,   91,   89,
       90,   91,  431,  433,  434,  448,  448,  430,  428,   89,
       90,   91,   89,   90,   91,  448,  432,  448,   89,   90,
       91,  448,  448,   89,   90,   91,   89,   90,   91,  448,
      431,  448,  433,  434,   89,   90,   91,  435,  448,   89,
       90,   91,  448,   89,   90,   91,   89,   90,   91,  436,

      448,   89,   90,   91,  437,  448,   89,   90,   91,   89,
       90,   91,   89,   90,   91,  435,   89,   90,   91,   89,
       90,   91,   89,   90,   91,   89,   90,   91,  436,  438,
      448,  448,  437,   89,   90,   91,   89,   90,   91,  439,
      440,   89,   90,   91,   89,   90,   91,  441,  448,  442,
      448,   89,   90,   91,   89,   90,   91,  438,   89,   90,
       91,  447,  448,  448,  448,  448,  445,  439,  443,  440,
      446,  448,  448,   89,   90,   91,  441,  442,  448,  448,
      448,  444,   89,   90,   91,  448,   89,   90,   91,  447,
      448,  448,   89,   90,   91,  445,  443,  448,  446,   89,

       90,   91,   89,   90,   91,  448,   89,   90,   91,  444,
      448,  448,  448,  448,   89,   90,   91,  448,   89,   90,
       91,  448,   89,   90,   91,   64,  448,   64,   64,   64,
       64,   64,   66,  448,   66,   66,   66,   66,   66,   75,
       75,   83,   83,   83,   83,  138,  448,  138,  138,  138,
      138,  138,  140,  448,  140,  140,  140,  140,  140,  150,
      150,  217,  217,  217,    5,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,

      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448
    } ;

static const flex_int16_t yy_chk[2350] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    3,    4,    8,    8,    9,    9,
       21,   21,   23,   32,   23,   23,   24,  223,   24,   24,

       27,   27,   27,   29,   29,   34,   23,   36,  218,   34,
       24,   62,   62,    3,    4,   36,   38,   38,   38,   82,
       82,   36,   32,   37,   73,   23,   73,   40,  217,   73,
       73,   83,   83,   83,   34,   23,   36,  158,   34,   24,
      108,  108,  108,  157,   36,   32,   32,   32,   41,   36,
      145,   37,  144,   23,   31,   31,   40,   34,   34,   34,
       35,  141,   35,   36,   36,   36,   31,   35,   37,   37,
       37,   31,   35,   31,  140,   50,  138,   41,   52,   40,
       40,   40,  137,   31,   31,   91,   42,  103,   35,   46,
       35,  148,  148,   46,   31,   35,   41,   41,   41,   31,

       35,   31,   90,   46,   50,   35,   35,   35,   89,   31,
       31,   31,   33,  149,  149,   42,  103,   67,   46,   33,
       66,   43,   46,   50,   50,   50,   33,   43,   65,   33,
       44,   46,   33,   64,   44,  103,  103,  103,   44,   84,
       61,   33,   42,   42,   42,   46,   46,   46,   33,   43,
       59,   52,   52,   52,   33,   43,   47,   33,   44,   45,
       33,   58,   44,   43,   43,   43,   44,   84,   33,   33,
       33,   39,   39,   44,   44,   44,   45,   57,   39,   39,
       55,   84,   84,   84,   39,   47,  151,  151,   45,   54,
       53,   69,   69,   71,   71,   30,   28,   49,   85,   49,

       39,   39,   49,   69,   45,   71,   39,   39,   47,   47,
       47,   22,   39,   20,   48,   45,   45,   45,   48,   14,
       11,   48,   39,   39,   39,   49,   85,   49,   51,   51,
       49,   48,   69,   86,   71,   85,   85,   85,   10,   87,
       49,   49,   49,   48,    7,   88,   72,   48,   72,   72,
       48,  118,  118,  118,  119,  119,  119,   51,   51,   48,
       72,    5,   86,   92,  143,  143,  143,    0,   87,   94,
       48,   48,   48,   88,    0,   93,   96,   51,   51,   51,
       60,   60,   88,   88,   88,    0,   86,   86,   86,   72,
        0,   92,   60,   87,   87,   87,    0,   60,   94,   60,

       92,   92,   92,   93,   95,   96,   95,    0,    0,   60,
       60,   98,    0,   93,   93,   93,   97,   98,    0,  101,
       60,   94,   94,   94,   98,   60,    0,   60,   96,   96,
       96,   99,   95,    0,   95,   60,   60,   60,  100,  102,
       98,    0,  147,  147,   97,   98,    0,    0,  101,   95,
       95,   95,   98,  105,  147,   97,   97,   97,  104,   99,
        0,  104,   98,   98,   98,    0,  100,    0,  102,   99,
       99,   99,  101,  101,  101,  107,  100,  100,  100,    0,
        0,  105,  106,  147,    0,    0,  110,  104,  106,  104,
        0,    0,  109,  102,  102,  102,  112,  114,  105,  105,

      105,    0,    0,  107,    0,    0,  104,  104,  104,    0,
      106,  154,  154,  154,  110,    0,  106,  107,  107,  107,
      109,  113,  115,    0,  112,  114,    0,  106,  106,  106,
      110,  110,  110,  111,    0,  109,  109,  109,  111,  112,
      112,  112,  116,  114,  114,  114,  117,    0,  111,  113,
      115,    0,    0,  113,  113,  113,  120,    0,    0,  115,
      115,  115,  111,  155,  155,  155,  121,  111,  122,    0,
      116,    0,  122,    0,  117,    0,  111,    0,    0,  116,
      116,  116,    0,    0,  123,  120,  111,  111,  111,  123,
      126,  117,  117,  117,  121,  162,    0,  122,  126,    0,

      125,  122,  127,    0,    0,  121,  121,  121,  120,  120,
      120,  125,    0,  123,  124,  124,    0,  123,  126,    0,
      122,  122,  122,  162,  124,  128,  126,  124,  125,    0,
        0,  127,  123,  123,  123,  126,  126,  126,    0,  125,
      162,  162,  162,  124,  124,  125,  125,  125,  129,    0,
      130,  132,  124,  128,  131,  124,  134,  127,  127,  127,
        0,  131,    0,  135,  133,  124,  124,  124,    0,  128,
      128,  128,    0,    0,  153,    0,    0,  129,  130,  146,
      132,    0,    0,  131,  134,    0,  130,  130,  130,    0,
      131,  136,  135,  133,    0,  134,  134,  134,  152,  156,

      129,  129,  129,  153,  132,  132,  132,    0,  146,  131,
      131,  131,  133,  133,  133,  135,  135,  135,  159,  136,
      169,  164,  153,  153,  153,    0,  152,  156,  136,  136,
      136,  161,  146,  146,  146,  185,    0,  152,  152,  152,
        0,  156,  156,  156,    0,  160,  159,  160,  169,    0,
      164,  163,  159,  159,  159,  165,    0,  169,  169,  169,
      161,    0,  160,  185,  163,  171,  171,  171,  167,  168,
        0,  185,  185,  185,  160,    0,  160,  164,  164,  164,
      163,  170,    0,  165,  166,  161,  161,  161,  166,  172,
      160,  173,  163,    0,  165,  165,  165,  167,  168,  160,

      160,  160,  163,  163,  163,  186,  186,  186,  174,    0,
      170,  175,    0,  166,    0,  177,    0,  166,  172,  173,
      167,  167,  167,  168,  168,  168,    0,    0,  176,  173,
      173,  173,    0,  170,  170,  170,  174,    0,    0,  175,
      166,  166,  166,  177,  178,  172,  172,  172,  179,  175,
      175,  175,  183,  174,  174,  174,  176,  180,  181,    0,
      177,  177,  177,  182,  188,  176,  176,  176,  204,  204,
      204,    0,    0,  178,  219,  219,  219,  179,  184,    0,
      183,  189,    0,    0,  187,  180,    0,  181,    0,  183,
      183,  183,  182,  188,  190,    0,  178,  178,  178,  180,

      180,  180,    0,  179,  179,  179,  191,  184,    0,  189,
      181,  181,  181,  187,  192,  182,  182,  182,  188,  188,
      188,  193,  190,    0,  189,  189,  189,  194,  195,  196,
      184,  184,  184,  197,  191,    0,  187,  187,  187,  190,
      190,  190,  192,    0,    0,  191,  191,  191,    0,  198,
      193,  192,  192,  192,  200,  194,  195,    0,  196,    0,
      199,    0,  197,  226,  226,  226,  195,  195,  195,  201,
      215,  194,  194,  194,    0,  193,  193,  193,  198,  196,
      196,  196,  200,  203,  202,  197,  197,  197,  199,  210,
        0,  200,  200,  200,  202,  205,  208,  201,  211,  215,

      207,  198,  198,  198,    0,  199,  199,  199,    0,    0,
      206,    0,  203,  202,  201,  201,  201,  210,  209,  215,
      215,  215,  202,  205,    0,  208,    0,  211,  207,  210,
      210,  210,  202,  202,  202,  203,  203,  203,  206,  212,
      205,  205,  205,  207,  207,  207,  209,    0,  208,  208,
      208,  206,  206,  206,  211,  211,  211,  213,    0,  214,
      209,  209,  209,  214,  224,    0,    0,  212,    0,  220,
      221,  222,  225,  227,  227,  227,    0,  228,    0,    0,
      229,  233,  212,  212,  212,  213,    0,  214,  237,  237,
      237,  214,    0,  224,  213,  213,  213,  220,  221,  230,

      222,  225,  214,  214,  214,  228,  220,  220,  220,  229,
      233,  231,  221,  221,  221,  232,  224,  224,  224,  222,
      222,  222,    0,  228,  228,  228,  238,  230,  225,  225,
      225,  234,  235,  233,  233,  233,  229,  229,  229,  231,
        0,    0,  236,  232,  230,  230,  230,    0,  231,  231,
      231,    0,  232,  232,  232,  238,  239,  239,  239,  234,
      235,  240,  241,  242,  242,  242,  243,  234,  234,  234,
      236,  235,  235,  235,  238,  238,  238,  244,    0,  236,
      236,  236,  245,  249,  246,  247,  247,  247,  250,  240,
      241,  254,  254,  254,    0,  243,  257,  257,  257,  241,

      241,  241,  240,  240,  240,    0,  244,  248,    0,    0,
      245,  251,  249,  246,  252,    0,  250,  253,  243,  243,
      243,  250,  250,  250,  245,  245,  245,  255,  261,  244,
      244,  244,  246,  246,  246,  248,  249,  249,  249,  259,
      251,  260,  252,  256,  262,  253,  248,  248,  248,  258,
      258,  258,    0,  252,  252,  252,  255,  261,    0,  251,
      251,  251,  253,  253,  253,  270,  270,  270,  259,    0,
      260,  256,  263,  262,  264,  265,  255,  255,  255,  256,
      256,  256,  266,  272,  261,  261,  261,  259,  259,  259,
      267,  268,    0,  260,  260,  260,  262,  262,  262,  269,

        0,  263,  264,  265,  271,  274,  274,  274,  265,  265,
      265,  266,  272,  264,  264,  264,    0,    0,  267,    0,
      268,  273,    0,    0,  263,  263,  263,    0,  269,  267,
      267,  267,    0,  271,  276,  272,  272,  272,  266,  266,
      266,  275,  275,  275,    0,  277,  268,  268,  268,  273,
      278,  279,  269,  269,  269,    0,  280,  282,  271,  271,
      271,  288,  276,  273,  273,  273,  281,  281,  281,    0,
      276,  276,  276,  277,    0,    0,  283,    0,  278,  285,
      279,  277,  277,  277,  280,  286,  282,  278,  278,  278,
      288,    0,  280,  280,  280,  284,  284,  284,  287,    0,

        0,  279,  279,  279,  283,    0,  290,  285,  291,  282,
      282,  282,  293,  286,  288,  288,  288,    0,  283,  283,
      283,  292,  285,  285,  285,  294,  295,  287,  286,  286,
      286,  289,  289,  289,  290,  296,    0,  291,  297,    0,
        0,  293,    0,  290,  290,  290,  301,  301,  301,  292,
      287,  287,  287,  294,  295,  298,  291,  291,  291,  299,
      292,  292,  292,  296,  293,  293,  293,  297,  294,  294,
      294,  295,  295,  295,  296,  296,  296,  300,    0,  302,
      304,  305,    0,  298,  307,  307,  307,    0,  299,    0,
      297,  297,  297,  303,  306,  308,    0,    0,  298,  298,

      298,  311,  311,  311,    0,  300,    0,  302,  309,  304,
      305,  299,  299,  299,    0,  300,  300,  300,  302,  302,
      302,  303,  310,  306,  308,    0,  312,  303,  303,  303,
      304,  304,  304,  305,  305,  305,  309,  313,  315,    0,
        0,  314,  306,  306,  306,  309,  309,  309,    0,    0,
      310,  308,  308,  308,  312,  316,  316,  316,  317,  317,
      317,  318,    0,  319,  320,  313,  315,  310,  310,  310,
      314,  312,  312,  312,  313,  313,  313,  315,  315,  315,
      321,  322,  323,  323,  323,  325,  325,  325,  324,  327,
      318,  319,  331,  320,  314,  314,  314,  330,  330,  330,

      332,  332,  332,  326,  319,  319,  319,  328,    0,  321,
      322,  329,    0,  318,  318,  318,  324,  327,  320,  320,
      320,  331,  334,  334,  334,  324,  324,  324,  321,  321,
      321,  326,  327,  327,  327,    0,  328,  322,  322,  322,
      329,  333,  326,  326,  326,  335,    0,  336,  331,  331,
      331,  337,    0,    0,  338,  339,  340,    0,  342,  328,
      328,  328,    0,  329,  329,  329,  341,  341,  341,  333,
      345,  345,  345,  346,  335,  336,    0,  333,  333,  333,
      337,    0,    0,  338,  339,  340,  342,  343,  350,  344,
      336,  336,  336,  344,  353,  342,  342,  342,    0,  335,

      335,  335,  346,  337,  337,  337,  338,  338,  338,  339,
      339,  339,  340,  340,  340,  343,  351,  350,  344,  347,
      347,  347,  344,  353,  343,  343,  343,  346,  346,  346,
      348,  348,  348,  349,  349,  349,  350,  350,  350,  352,
      352,  352,  354,    0,  351,  344,  344,  344,  357,  358,
      353,  353,  353,  355,  355,  355,  356,  356,  356,  351,
      351,  351,  359,    0,  361,  362,  362,  362,  360,    0,
      354,  366,  366,  366,  363,  364,  357,  367,  358,  369,
      369,  369,    0,    0,  365,    0,    0,  354,  354,  354,
      368,  359,  361,  357,  357,  357,  360,  358,  358,  358,

      360,  360,  360,  363,  364,    0,  367,  361,  361,  361,
      359,  359,  359,  365,  370,  370,  370,    0,  371,  368,
      372,  373,  374,  374,  374,    0,  363,  363,  363,  364,
      364,  364,    0,  367,  367,  367,    0,  378,  365,  365,
      365,  377,  379,  368,  368,  368,  371,    0,  372,  373,
      375,  375,  375,  376,  376,  376,  383,  372,  372,  372,
      373,  373,  373,  371,  371,  371,  378,  381,    0,  377,
      384,  379,  379,  379,  380,  380,  380,  382,  377,  377,
      377,  385,  385,  385,  383,  378,  378,  378,  386,  387,
      388,  388,  388,  383,  383,  383,  381,    0,  384,    0,

      389,  391,  391,  391,    0,  390,  382,    0,  392,  393,
      393,  393,  395,  384,  384,  384,  386,  387,  394,  398,
      398,  398,  381,  381,  381,  386,  386,  386,  389,    0,
      382,  382,  382,  390,  387,  387,  387,  392,  396,  397,
      395,    0,  389,  389,  389,  400,  394,    0,  390,  390,
      390,  399,  399,  399,    0,  394,  394,  394,  395,  395,
      395,  402,  392,  392,  392,  403,  396,  404,  397,  401,
      401,  401,  407,  408,  400,    0,    0,  396,  396,  396,
        0,  403,  405,  405,  405,  406,  406,  406,  411,  402,
        0,  397,  397,  397,  403,  404,    0,  400,  400,  400,

      409,  407,  408,  410,  402,  402,  402,  412,    0,  403,
        0,    0,  404,  404,  404,  416,    0,  411,  403,  403,
      403,    0,  407,  407,  407,  408,  408,  408,  409,  417,
      415,  410,  409,  409,  409,    0,  412,  419,  411,  411,
      411,  413,  413,  413,  416,    0,  410,  410,  410,  414,
      414,  414,  418,  420,  421,    0,    0,  417,  415,  412,
      412,  412,  415,  415,  415,    0,  419,    0,  416,  416,
      416,    0,    0,  417,  417,  417,  422,  422,  422,    0,
      418,    0,  420,  421,  423,  423,  423,  427,    0,  418,
      418,  418,    0,  419,  419,  419,  424,  424,  424,  430,

        0,  420,  420,  420,  432,    0,  421,  421,  421,  425,
      425,  425,  426,  426,  426,  427,  428,  428,  428,  429,
      429,  429,  431,  431,  431,  427,  427,  427,  430,  433,
        0,    0,  432,  434,  434,  434,  435,  435,  435,  436,
      437,  432,  432,  432,  440,  440,  440,  438,    0,  439,
        0,  430,  430,  430,  442,  442,  442,  433,  447,  447,
      447,  446,    0,    0,    0,    0,  444,  436,  441,  437,
      445,    0,    0,  433,  433,  433,  438,  439,    0,    0,
        0,  443,  436,  436,  436,    0,  439,  439,  439,  446,
        0,    0,  437,  437,  437,  444,  441,    0,  445,  438,

      438,  438,  446,  446,  446,    0,  441,  441,  441,  443,
        0,    0,    0,    0,  445,  445,  445,    0,  443,  443,
      443,    0,  444,  444,  444,  449,    0,  449,  449,  449,
      449,  449,  450,    0,  450,  450,  450,  450,  450,  451,
      451,  452,  452,  452,  452,  453,    0,  453,  453,  453,
      453,  453,  454,    0,  454,  454,  454,  454,  454,  455,
      455,  456,  456,  456,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,

      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448
    } ;

static const flex_int16_t yy_rule_linenum[120] =
    {   0,
       80,   81,   83,   89,  113,  114,  115,  117,  118,  119,
      120,  121,  122,  123,  124,  125,  126,  127,  128,  129,
      130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
      140,  141,  142,  143,  144,  145,  146,  147,  148,  149,
      150,  151,  152,  153,  154,  155,  156,  157,  158,  159,
      160,  161,  162,  163,  164,  165,  166,  167,  168,  169,
      170,  171,  172,  173,  174,  175,  176,  177,  178,  179,
      180,  181,  182,  183,  184,  185,  186,  187,  188,  189,
      190,  191,  192,  193,  194,  196,  197,  198,  199,  200,
      201,  202,  203,  204,  206,  207,  208,  209,  210,  211,

      212,  213,  214,  215,  216,  217,  218,  219,  220,  221,
      222,  223,  224,  225,  226,  227,  228,  229,  231
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "sqlite3_lexer.ll"
#line 2 "sqlite3_lexer.ll"
#include <string>
#include "ParserDriver.h"
#include "sqlite3_parser.hpp"
#line 1192 "sqlite3_lexer.cpp"
#define YY_NO_UNISTD_H 1
#line 12 "sqlite3_lexer.ll"
	#define TOKEN(n) sqlb::parser::parser::symbol_type(sqlb::parser::parser::token::TOK_##n, yytext, loc)

	std::string unquote_string(std::string s, char quote_char)
	{
		if(s.size() < 2)
			return s;

		if(quote_char == '[')
		{
			if(s.front() == '[' && s.back() == ']')
				s = s.substr(1, s.size()-2);
		} else {
			if(s.front() == quote_char && s.back() == quote_char)
			{
				s = s.substr(1, s.size()-2);
				auto pos = s.npos;
				while((pos = s.find(std::string(2, quote_char))) != s.npos)
					s = s.replace(pos, 2, std::string(1, quote_char));
			}
		}

		return s;
	}
#line 1218 "sqlite3_lexer.cpp"
#line 55 "sqlite3_lexer.ll"
	/* TODO Add $ bind parameters */
	// Code run each time a pattern is matched.
	#define YY_USER_ACTION loc.columns(yyleng);
#line 1223 "sqlite3_lexer.cpp"

#line 1225 "sqlite3_lexer.cpp"

#define INITIAL 0
#define BETWEEN_MODE 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
#include <unistd.h>
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    }; /* end struct yyguts_t */

/* %if-c-only */

static int yy_init_globals ( yyscan_t yyscanner );

/* %endif */

/* %if-reentrant */

int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* %endif */

/* %endif End reentrant structures and macros. */

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

/* %if-bison-bridge */
/* %endif */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

/* %not-for-header */
#ifndef YY_NO_UNPUT
    
#endif
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */

/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\
/* %if-c++-only C++ definition \ */\
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */
/* %ok-for-header */

/* %not-for-header */
/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */

extern int yylex (yyscan_t yyscanner);

#define YY_DECL int yylex (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */
/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
			yyin = stdin;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! yyout )
/* %if-c-only */
			yyout = stdout;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
/* %% [7.0] user's declarations go here */
#line 69 "sqlite3_lexer.ll"



#line 73 "sqlite3_lexer.ll"
	// Shortcut to the location held by the driver
	sqlb::parser::location& loc = drv.location;

	// Code run each time yylex is called.
	loc.step();


#line 1563 "sqlite3_lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 449 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 448 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 120 )
				fprintf( stderr, "--accepting rule at line %ld (\"%s\")\n",
				         (long)yy_rule_linenum[yy_act], yytext );
			else if ( yy_act == 120 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         yytext );
			else if ( yy_act == 121 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 80 "sqlite3_lexer.ll"
loc.step();
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 81 "sqlite3_lexer.ll"
loc.lines(yyleng); loc.step();
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 83 "sqlite3_lexer.ll"
{
			int c;
			while((c = yyinput(yyscanner)) != '\n' && c != EOF)
				;    /* eat up text of comment */
		}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 89 "sqlite3_lexer.ll"
{
			int c;

			for(;;)
			{
				while((c = yyinput(yyscanner)) != '*' && c != EOF)
					;    /* eat up text of comment */

				if(c == '*')
				{
					while((c = yyinput(yyscanner)) == '*')
						;
					if(c == '/')
						break;    /* found the end */
				}

				if(c == EOF)
					throw sqlb::parser::parser::syntax_error(loc, "EOF in comment");
			}
		}
	YY_BREAK
/* For lack of a better idea, we need this hack to avoid reduce/reduce conflicts in the rules for parsing BETWEEN expressions.
  * What we do here is distinguish two types of AND operators: the regular one and the special case when the AND follows a BETWEEN keyword.
  */
case 5:
YY_RULE_SETUP
#line 113 "sqlite3_lexer.ll"
{ BEGIN INITIAL; return TOKEN(AND_BETWEEN); }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 114 "sqlite3_lexer.ll"
return TOKEN(AND);
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 115 "sqlite3_lexer.ll"
{ BEGIN BETWEEN_MODE; return TOKEN(BETWEEN); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 117 "sqlite3_lexer.ll"
return TOKEN(ABORT);
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 118 "sqlite3_lexer.ll"
return TOKEN(ACTION);
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 119 "sqlite3_lexer.ll"
return TOKEN(AS);
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 120 "sqlite3_lexer.ll"
return TOKEN(ASC);
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 121 "sqlite3_lexer.ll"
return TOKEN(AUTOINCREMENT);
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 122 "sqlite3_lexer.ll"
return TOKEN(CASCADE);
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 123 "sqlite3_lexer.ll"
return TOKEN(CASE);
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 124 "sqlite3_lexer.ll"
return TOKEN(CAST);
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 125 "sqlite3_lexer.ll"
return TOKEN(CHECK);
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 126 "sqlite3_lexer.ll"
return TOKEN(COLLATE);
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 127 "sqlite3_lexer.ll"
return TOKEN(CONFLICT);
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 128 "sqlite3_lexer.ll"
return TOKEN(CONSTRAINT);
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 129 "sqlite3_lexer.ll"
return TOKEN(CREATE);
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 130 "sqlite3_lexer.ll"
return TOKEN(CURRENT_DATE);
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 131 "sqlite3_lexer.ll"
return TOKEN(CURRENT_TIME);
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 132 "sqlite3_lexer.ll"
return TOKEN(CURRENT_TIMESTAMP);
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 133 "sqlite3_lexer.ll"
return TOKEN(DEFAULT);
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 134 "sqlite3_lexer.ll"
return TOKEN(DEFERRABLE);
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 135 "sqlite3_lexer.ll"
return TOKEN(DEFERRED);
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 136 "sqlite3_lexer.ll"
return TOKEN(DELETE);
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 137 "sqlite3_lexer.ll"
return TOKEN(DESC);
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 138 "sqlite3_lexer.ll"
return TOKEN(DISTINCT);
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 139 "sqlite3_lexer.ll"
return TOKEN(ELSE);
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 140 "sqlite3_lexer.ll"
return TOKEN(END);
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 141 "sqlite3_lexer.ll"
return TOKEN(ESCAPE);
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 142 "sqlite3_lexer.ll"
return TOKEN(EXISTS);
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 143 "sqlite3_lexer.ll"
return TOKEN(FAIL);
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 144 "sqlite3_lexer.ll"
return TOKEN(FALSE);
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 145 "sqlite3_lexer.ll"
return TOKEN(FILTER);
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 146 "sqlite3_lexer.ll"
return TOKEN(FOLLOWING);
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 147 "sqlite3_lexer.ll"
return TOKEN(FOREIGN);
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 148 "sqlite3_lexer.ll"
return TOKEN(GLOB);
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 149 "sqlite3_lexer.ll"
return TOKEN(IF);
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 150 "sqlite3_lexer.ll"
return TOKEN(IGNORE);
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 151 "sqlite3_lexer.ll"
return TOKEN(IMMEDIATE);
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 152 "sqlite3_lexer.ll"
return TOKEN(IN);
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 153 "sqlite3_lexer.ll"
return TOKEN(INDEX);
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 154 "sqlite3_lexer.ll"
return TOKEN(INITIALLY);
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 155 "sqlite3_lexer.ll"
return TOKEN(INSERT);
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 156 "sqlite3_lexer.ll"
return TOKEN(IS);
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 157 "sqlite3_lexer.ll"
return TOKEN(ISNULL);
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 158 "sqlite3_lexer.ll"
return TOKEN(KEY);
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 159 "sqlite3_lexer.ll"
return TOKEN(LIKE);
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 160 "sqlite3_lexer.ll"
return TOKEN(MATCH);
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 161 "sqlite3_lexer.ll"
return TOKEN(NO);
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 162 "sqlite3_lexer.ll"
return TOKEN(NOT);
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 163 "sqlite3_lexer.ll"
return TOKEN(NOTNULL);
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 164 "sqlite3_lexer.ll"
return TOKEN(NULL);
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 165 "sqlite3_lexer.ll"
return TOKEN(ON);
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 166 "sqlite3_lexer.ll"
return TOKEN(OR);
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 167 "sqlite3_lexer.ll"
return TOKEN(OVER);
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 168 "sqlite3_lexer.ll"
return TOKEN(PARTITION);
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 169 "sqlite3_lexer.ll"
return TOKEN(PRECEDING);
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 170 "sqlite3_lexer.ll"
return TOKEN(PRIMARY);
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 171 "sqlite3_lexer.ll"
return TOKEN(RAISE);
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 172 "sqlite3_lexer.ll"
return TOKEN(RANGE);
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 173 "sqlite3_lexer.ll"
return TOKEN(REFERENCES);
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 174 "sqlite3_lexer.ll"
return TOKEN(REGEXP);
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 175 "sqlite3_lexer.ll"
return TOKEN(REPLACE);
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 176 "sqlite3_lexer.ll"
return TOKEN(RESTRICT);
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 177 "sqlite3_lexer.ll"
return TOKEN(ROLLBACK);
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 178 "sqlite3_lexer.ll"
return TOKEN(ROWID);
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 179 "sqlite3_lexer.ll"
return TOKEN(ROWS);
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 180 "sqlite3_lexer.ll"
return TOKEN(SELECT);
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 181 "sqlite3_lexer.ll"
return TOKEN(SET);
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 182 "sqlite3_lexer.ll"
return TOKEN(TABLE);
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 183 "sqlite3_lexer.ll"
return TOKEN(TEMP);
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 184 "sqlite3_lexer.ll"
return TOKEN(TEMPORARY);
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 185 "sqlite3_lexer.ll"
return TOKEN(THEN);
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 186 "sqlite3_lexer.ll"
return TOKEN(TRUE);
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 187 "sqlite3_lexer.ll"
return TOKEN(UNBOUNDED);
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 188 "sqlite3_lexer.ll"
return TOKEN(UNIQUE);
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 189 "sqlite3_lexer.ll"
return TOKEN(UPDATE);
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 190 "sqlite3_lexer.ll"
return TOKEN(USING);
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 191 "sqlite3_lexer.ll"
return TOKEN(VIRTUAL);
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 192 "sqlite3_lexer.ll"
return TOKEN(WHEN);
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 193 "sqlite3_lexer.ll"
return TOKEN(WHERE);
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 194 "sqlite3_lexer.ll"
return TOKEN(WITHOUT);
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 196 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_IDENTIFIER(yytext, loc);
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 197 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_IDENTIFIER(unquote_string(yytext, '`'), loc);
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 198 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_IDENTIFIER(unquote_string(yytext, '['), loc);
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 199 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_QUOTEDLITERAL(unquote_string(yytext, '"'), loc);
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 200 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_STRINGLITERAL(yytext, loc);
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 201 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_NUMERIC(yytext, loc);
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 202 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_BLOBLITERAL(yytext, loc);
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 203 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_BINDPARAMETER(yytext, loc);
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 204 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_BINDPARAMETER(yytext, loc);
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 206 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_LPAREN(loc);
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 207 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_RPAREN(loc);
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 208 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_DOT(loc);
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 209 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_COMMA(loc);
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 210 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_SEMI(loc);
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 211 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_PLUS(loc);
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 212 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_MINUS(loc);
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 213 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_STAR(loc);
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 214 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_SLASH(loc);
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 215 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_TILDE(loc);
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 216 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_AMPERSAND(loc);
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 217 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_PERCENT(loc);
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 218 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_BITOR(loc);
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 219 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_OROP(loc);
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 220 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_EQUAL(loc);
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 221 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_EQUAL2(loc);
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 222 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_GREATER(loc);
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 223 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_GREATEREQUAL(loc);
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 224 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_LOWER(loc);
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 225 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_LOWEREQUAL(loc);
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 226 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_UNEQUAL(loc);
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 227 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_UNEQUAL2(loc);
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 228 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_BITWISELEFT(loc);
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 229 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_BITWISERIGHT(loc);
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 231 "sqlite3_lexer.ll"
throw sqlb::parser::parser::syntax_error(loc, "Invalid character: " + std::string(yytext));
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(BETWEEN_MODE):
#line 233 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_EOF(loc);
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 235 "sqlite3_lexer.ll"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 2271 "sqlite3_lexer.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
/* %if-c-only */
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
/* %endif */
/* %if-c++-only */
/* %endif */
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
static int yy_get_next_buffer (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */
    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 449 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
/* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 449 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 448);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
/* %if-c-only */

/* %endif */
#endif

/* %if-c-only */
#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

/* %endif */
/* %if-c++-only */
/* %endif */
{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
#endif	/* ifndef YY_NO_INPUT */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/* %if-c++-only */
/* %endif */

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/* %if-c-only */
static void yy_load_buffer_state  (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
/* %if-c-only */
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
/* %endif */
/* %if-c++-only */
/* %endif */
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
/* %if-c-only */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/* %if-c++-only */
/* %endif */

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

/* %if-c-only */
	b->yy_input_file = file;
/* %endif */
/* %if-c++-only */
/* %endif */
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */

        b->yy_is_interactive = 0;
    
/* %endif */
/* %if-c++-only */
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
/* %if-c-only */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
/* %if-c-only */
void yypop_buffer_state (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
static void yyensure_buffer_stack (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
/* %endif */

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}
/* %endif */
/* %if-c++-only */
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/* %endif */

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/* %if-reentrant */

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/* %endif */

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* %endif */

/* %if-reentrant */
/* Accessor methods for yylval and yylloc */

/* %if-bison-bridge */
/* %endif */

/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

/* %endif if-c-only */

/* %if-c-only */
static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

/* %if-reentrant */
    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
/* %endif */
    return 0;
}
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 235 "sqlite3_lexer.ll"


namespace sqlb
{
namespace parser
{

void ParserDriver::begin_scan()
{
	yylex_init(&scanner);
	location.initialize();
	yyset_debug(trace_scanner, scanner);
	buffer = yy_scan_string(source.c_str(), scanner);
}

void ParserDriver::end_scan()
{
	yy_delete_buffer(buffer, scanner);
	yylex_destroy(scanner);
}

}
}

